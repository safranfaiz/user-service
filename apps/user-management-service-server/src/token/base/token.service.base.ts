/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Token as PrismaToken,
  User as PrismaUser,
} from "@prisma/client";

export class TokenServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TokenCountArgs, "select">): Promise<number> {
    return this.prisma.token.count(args);
  }

  async tokens<T extends Prisma.TokenFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TokenFindManyArgs>
  ): Promise<PrismaToken[]> {
    return this.prisma.token.findMany<Prisma.TokenFindManyArgs>(args);
  }
  async token<T extends Prisma.TokenFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TokenFindUniqueArgs>
  ): Promise<PrismaToken | null> {
    return this.prisma.token.findUnique(args);
  }
  async createToken<T extends Prisma.TokenCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TokenCreateArgs>
  ): Promise<PrismaToken> {
    return this.prisma.token.create<T>(args);
  }
  async updateToken<T extends Prisma.TokenUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TokenUpdateArgs>
  ): Promise<PrismaToken> {
    return this.prisma.token.update<T>(args);
  }
  async deleteToken<T extends Prisma.TokenDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TokenDeleteArgs>
  ): Promise<PrismaToken> {
    return this.prisma.token.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.token
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
